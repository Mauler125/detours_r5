// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netcon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_netcon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_netcon_2eproto

#include <limits>
#include <string>

#include <thirdparty/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <thirdparty/protobuf/port_undef.inc>
#include <thirdparty/protobuf/io/coded_stream.h>
#include <thirdparty/protobuf/arena.h>
#include <thirdparty/protobuf/arenastring.h>
#include <thirdparty/protobuf/generated_message_util.h>
#include <thirdparty/protobuf/metadata_lite.h>
#include <thirdparty/protobuf/message_lite.h>
#include <thirdparty/protobuf/repeated_field.h>  // IWYU pragma: export
#include <thirdparty/protobuf/extension_set.h>  // IWYU pragma: export
#include <thirdparty/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <thirdparty/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_netcon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_netcon_2eproto {
  static const uint32_t offsets[];
};
namespace netcon {
class envelope;
struct envelopeDefaultTypeInternal;
extern envelopeDefaultTypeInternal _envelope_default_instance_;
class request;
struct requestDefaultTypeInternal;
extern requestDefaultTypeInternal _request_default_instance_;
class response;
struct responseDefaultTypeInternal;
extern responseDefaultTypeInternal _response_default_instance_;
}  // namespace netcon
PROTOBUF_NAMESPACE_OPEN
template<> ::netcon::envelope* Arena::CreateMaybeMessage<::netcon::envelope>(Arena*);
template<> ::netcon::request* Arena::CreateMaybeMessage<::netcon::request>(Arena*);
template<> ::netcon::response* Arena::CreateMaybeMessage<::netcon::response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace netcon {

enum request_e : int {
  SERVERDATA_REQUEST_EXECCOMMAND = 0,
  SERVERDATA_REQUEST_AUTH = 1,
  SERVERDATA_REQUEST_SEND_CONSOLE_LOG = 2,
  request_e_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  request_e_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool request_e_IsValid(int value);
constexpr request_e request_e_MIN = SERVERDATA_REQUEST_EXECCOMMAND;
constexpr request_e request_e_MAX = SERVERDATA_REQUEST_SEND_CONSOLE_LOG;
constexpr int request_e_ARRAYSIZE = request_e_MAX + 1;

const std::string& request_e_Name(request_e value);
template<typename T>
inline const std::string& request_e_Name(T enum_t_value) {
  static_assert(::std::is_same<T, request_e>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function request_e_Name.");
  return request_e_Name(static_cast<request_e>(enum_t_value));
}
bool request_e_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, request_e* value);
enum response_e : int {
  SERVERDATA_RESPONSE_AUTH = 0,
  SERVERDATA_RESPONSE_CONSOLE_LOG = 1,
  response_e_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  response_e_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool response_e_IsValid(int value);
constexpr response_e response_e_MIN = SERVERDATA_RESPONSE_AUTH;
constexpr response_e response_e_MAX = SERVERDATA_RESPONSE_CONSOLE_LOG;
constexpr int response_e_ARRAYSIZE = response_e_MAX + 1;

const std::string& response_e_Name(response_e value);
template<typename T>
inline const std::string& response_e_Name(T enum_t_value) {
  static_assert(::std::is_same<T, response_e>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function response_e_Name.");
  return response_e_Name(static_cast<response_e>(enum_t_value));
}
bool response_e_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, response_e* value);
// ===================================================================

class request final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:netcon.request) */ {
 public:
  inline request() : request(nullptr) {}
  ~request() override;
  explicit PROTOBUF_CONSTEXPR request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  request(const request& from);
  request(request&& from) noexcept
    : request() {
    *this = ::std::move(from);
  }

  inline request& operator=(const request& from) {
    CopyFrom(from);
    return *this;
  }
  inline request& operator=(request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const request& default_instance() {
    return *internal_default_instance();
  }
  static inline const request* internal_default_instance() {
    return reinterpret_cast<const request*>(
               &_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(request& a, request& b) {
    a.Swap(&b);
  }
  inline void Swap(request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const request& from);
  void MergeFrom(const request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "netcon.request";
  }
  protected:
  explicit request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestMsgFieldNumber = 4,
    kRequestValFieldNumber = 5,
    kMessageIdFieldNumber = 1,
    kMessageTypeFieldNumber = 2,
    kRequestTypeFieldNumber = 3,
  };
  // optional string requestMsg = 4;
  bool has_requestmsg() const;
  private:
  bool _internal_has_requestmsg() const;
  public:
  void clear_requestmsg();
  const std::string& requestmsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestmsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestmsg();
  PROTOBUF_NODISCARD std::string* release_requestmsg();
  void set_allocated_requestmsg(std::string* requestmsg);
  private:
  const std::string& _internal_requestmsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestmsg(const std::string& value);
  std::string* _internal_mutable_requestmsg();
  public:

  // optional string requestVal = 5;
  bool has_requestval() const;
  private:
  bool _internal_has_requestval() const;
  public:
  void clear_requestval();
  const std::string& requestval() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestval(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestval();
  PROTOBUF_NODISCARD std::string* release_requestval();
  void set_allocated_requestval(std::string* requestval);
  private:
  const std::string& _internal_requestval() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestval(const std::string& value);
  std::string* _internal_mutable_requestval();
  public:

  // optional int32 messageId = 1;
  bool has_messageid() const;
  private:
  bool _internal_has_messageid() const;
  public:
  void clear_messageid();
  int32_t messageid() const;
  void set_messageid(int32_t value);
  private:
  int32_t _internal_messageid() const;
  void _internal_set_messageid(int32_t value);
  public:

  // optional int32 messageType = 2;
  bool has_messagetype() const;
  private:
  bool _internal_has_messagetype() const;
  public:
  void clear_messagetype();
  int32_t messagetype() const;
  void set_messagetype(int32_t value);
  private:
  int32_t _internal_messagetype() const;
  void _internal_set_messagetype(int32_t value);
  public:

  // optional .netcon.request_e requestType = 3;
  bool has_requesttype() const;
  private:
  bool _internal_has_requesttype() const;
  public:
  void clear_requesttype();
  ::netcon::request_e requesttype() const;
  void set_requesttype(::netcon::request_e value);
  private:
  ::netcon::request_e _internal_requesttype() const;
  void _internal_set_requesttype(::netcon::request_e value);
  public:

  // @@protoc_insertion_point(class_scope:netcon.request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestmsg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestval_;
    int32_t messageid_;
    int32_t messagetype_;
    int requesttype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_netcon_2eproto;
};
// -------------------------------------------------------------------

class response final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:netcon.response) */ {
 public:
  inline response() : response(nullptr) {}
  ~response() override;
  explicit PROTOBUF_CONSTEXPR response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  response(const response& from);
  response(response&& from) noexcept
    : response() {
    *this = ::std::move(from);
  }

  inline response& operator=(const response& from) {
    CopyFrom(from);
    return *this;
  }
  inline response& operator=(response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const response& default_instance() {
    return *internal_default_instance();
  }
  static inline const response* internal_default_instance() {
    return reinterpret_cast<const response*>(
               &_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(response& a, response& b) {
    a.Swap(&b);
  }
  inline void Swap(response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const response& from);
  void MergeFrom(const response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "netcon.response";
  }
  protected:
  explicit response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseMsgFieldNumber = 4,
    kResponseValFieldNumber = 5,
    kMessageIdFieldNumber = 1,
    kMessageTypeFieldNumber = 2,
    kResponseTypeFieldNumber = 3,
  };
  // optional string responseMsg = 4;
  bool has_responsemsg() const;
  private:
  bool _internal_has_responsemsg() const;
  public:
  void clear_responsemsg();
  const std::string& responsemsg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_responsemsg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_responsemsg();
  PROTOBUF_NODISCARD std::string* release_responsemsg();
  void set_allocated_responsemsg(std::string* responsemsg);
  private:
  const std::string& _internal_responsemsg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_responsemsg(const std::string& value);
  std::string* _internal_mutable_responsemsg();
  public:

  // optional string responseVal = 5;
  bool has_responseval() const;
  private:
  bool _internal_has_responseval() const;
  public:
  void clear_responseval();
  const std::string& responseval() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_responseval(ArgT0&& arg0, ArgT... args);
  std::string* mutable_responseval();
  PROTOBUF_NODISCARD std::string* release_responseval();
  void set_allocated_responseval(std::string* responseval);
  private:
  const std::string& _internal_responseval() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_responseval(const std::string& value);
  std::string* _internal_mutable_responseval();
  public:

  // optional int32 messageId = 1;
  bool has_messageid() const;
  private:
  bool _internal_has_messageid() const;
  public:
  void clear_messageid();
  int32_t messageid() const;
  void set_messageid(int32_t value);
  private:
  int32_t _internal_messageid() const;
  void _internal_set_messageid(int32_t value);
  public:

  // optional int32 messageType = 2;
  bool has_messagetype() const;
  private:
  bool _internal_has_messagetype() const;
  public:
  void clear_messagetype();
  int32_t messagetype() const;
  void set_messagetype(int32_t value);
  private:
  int32_t _internal_messagetype() const;
  void _internal_set_messagetype(int32_t value);
  public:

  // optional .netcon.response_e responseType = 3;
  bool has_responsetype() const;
  private:
  bool _internal_has_responsetype() const;
  public:
  void clear_responsetype();
  ::netcon::response_e responsetype() const;
  void set_responsetype(::netcon::response_e value);
  private:
  ::netcon::response_e _internal_responsetype() const;
  void _internal_set_responsetype(::netcon::response_e value);
  public:

  // @@protoc_insertion_point(class_scope:netcon.response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr responsemsg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr responseval_;
    int32_t messageid_;
    int32_t messagetype_;
    int responsetype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_netcon_2eproto;
};
// -------------------------------------------------------------------

class envelope final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:netcon.envelope) */ {
 public:
  inline envelope() : envelope(nullptr) {}
  ~envelope() override;
  explicit PROTOBUF_CONSTEXPR envelope(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  envelope(const envelope& from);
  envelope(envelope&& from) noexcept
    : envelope() {
    *this = ::std::move(from);
  }

  inline envelope& operator=(const envelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline envelope& operator=(envelope&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const envelope& default_instance() {
    return *internal_default_instance();
  }
  static inline const envelope* internal_default_instance() {
    return reinterpret_cast<const envelope*>(
               &_envelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(envelope& a, envelope& b) {
    a.Swap(&b);
  }
  inline void Swap(envelope* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(envelope* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  envelope* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<envelope>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const envelope& from);
  void MergeFrom(const envelope& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(envelope* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "netcon.envelope";
  }
  protected:
  explicit envelope(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNonceFieldNumber = 2,
    kDataFieldNumber = 3,
    kEncryptedFieldNumber = 1,
  };
  // bytes nonce = 2;
  void clear_nonce();
  const std::string& nonce() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nonce(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nonce();
  PROTOBUF_NODISCARD std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bool encrypted = 1;
  void clear_encrypted();
  bool encrypted() const;
  void set_encrypted(bool value);
  private:
  bool _internal_encrypted() const;
  void _internal_set_encrypted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:netcon.envelope)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    bool encrypted_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_netcon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// request

// optional int32 messageId = 1;
inline bool request::_internal_has_messageid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool request::has_messageid() const {
  return _internal_has_messageid();
}
inline void request::clear_messageid() {
  _impl_.messageid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t request::_internal_messageid() const {
  return _impl_.messageid_;
}
inline int32_t request::messageid() const {
  // @@protoc_insertion_point(field_get:netcon.request.messageId)
  return _internal_messageid();
}
inline void request::_internal_set_messageid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.messageid_ = value;
}
inline void request::set_messageid(int32_t value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:netcon.request.messageId)
}

// optional int32 messageType = 2;
inline bool request::_internal_has_messagetype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool request::has_messagetype() const {
  return _internal_has_messagetype();
}
inline void request::clear_messagetype() {
  _impl_.messagetype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t request::_internal_messagetype() const {
  return _impl_.messagetype_;
}
inline int32_t request::messagetype() const {
  // @@protoc_insertion_point(field_get:netcon.request.messageType)
  return _internal_messagetype();
}
inline void request::_internal_set_messagetype(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.messagetype_ = value;
}
inline void request::set_messagetype(int32_t value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:netcon.request.messageType)
}

// optional .netcon.request_e requestType = 3;
inline bool request::_internal_has_requesttype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool request::has_requesttype() const {
  return _internal_has_requesttype();
}
inline void request::clear_requesttype() {
  _impl_.requesttype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::netcon::request_e request::_internal_requesttype() const {
  return static_cast< ::netcon::request_e >(_impl_.requesttype_);
}
inline ::netcon::request_e request::requesttype() const {
  // @@protoc_insertion_point(field_get:netcon.request.requestType)
  return _internal_requesttype();
}
inline void request::_internal_set_requesttype(::netcon::request_e value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.requesttype_ = value;
}
inline void request::set_requesttype(::netcon::request_e value) {
  _internal_set_requesttype(value);
  // @@protoc_insertion_point(field_set:netcon.request.requestType)
}

// optional string requestMsg = 4;
inline bool request::_internal_has_requestmsg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool request::has_requestmsg() const {
  return _internal_has_requestmsg();
}
inline void request::clear_requestmsg() {
  _impl_.requestmsg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& request::requestmsg() const {
  // @@protoc_insertion_point(field_get:netcon.request.requestMsg)
  return _internal_requestmsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void request::set_requestmsg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.requestmsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:netcon.request.requestMsg)
}
inline std::string* request::mutable_requestmsg() {
  std::string* _s = _internal_mutable_requestmsg();
  // @@protoc_insertion_point(field_mutable:netcon.request.requestMsg)
  return _s;
}
inline const std::string& request::_internal_requestmsg() const {
  return _impl_.requestmsg_.Get();
}
inline void request::_internal_set_requestmsg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.requestmsg_.Set(value, GetArenaForAllocation());
}
inline std::string* request::_internal_mutable_requestmsg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.requestmsg_.Mutable(GetArenaForAllocation());
}
inline std::string* request::release_requestmsg() {
  // @@protoc_insertion_point(field_release:netcon.request.requestMsg)
  if (!_internal_has_requestmsg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.requestmsg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestmsg_.IsDefault()) {
    _impl_.requestmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void request::set_allocated_requestmsg(std::string* requestmsg) {
  if (requestmsg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.requestmsg_.SetAllocated(requestmsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestmsg_.IsDefault()) {
    _impl_.requestmsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:netcon.request.requestMsg)
}

// optional string requestVal = 5;
inline bool request::_internal_has_requestval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool request::has_requestval() const {
  return _internal_has_requestval();
}
inline void request::clear_requestval() {
  _impl_.requestval_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& request::requestval() const {
  // @@protoc_insertion_point(field_get:netcon.request.requestVal)
  return _internal_requestval();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void request::set_requestval(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.requestval_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:netcon.request.requestVal)
}
inline std::string* request::mutable_requestval() {
  std::string* _s = _internal_mutable_requestval();
  // @@protoc_insertion_point(field_mutable:netcon.request.requestVal)
  return _s;
}
inline const std::string& request::_internal_requestval() const {
  return _impl_.requestval_.Get();
}
inline void request::_internal_set_requestval(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.requestval_.Set(value, GetArenaForAllocation());
}
inline std::string* request::_internal_mutable_requestval() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.requestval_.Mutable(GetArenaForAllocation());
}
inline std::string* request::release_requestval() {
  // @@protoc_insertion_point(field_release:netcon.request.requestVal)
  if (!_internal_has_requestval()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.requestval_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestval_.IsDefault()) {
    _impl_.requestval_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void request::set_allocated_requestval(std::string* requestval) {
  if (requestval != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.requestval_.SetAllocated(requestval, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.requestval_.IsDefault()) {
    _impl_.requestval_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:netcon.request.requestVal)
}

// -------------------------------------------------------------------

// response

// optional int32 messageId = 1;
inline bool response::_internal_has_messageid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool response::has_messageid() const {
  return _internal_has_messageid();
}
inline void response::clear_messageid() {
  _impl_.messageid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t response::_internal_messageid() const {
  return _impl_.messageid_;
}
inline int32_t response::messageid() const {
  // @@protoc_insertion_point(field_get:netcon.response.messageId)
  return _internal_messageid();
}
inline void response::_internal_set_messageid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.messageid_ = value;
}
inline void response::set_messageid(int32_t value) {
  _internal_set_messageid(value);
  // @@protoc_insertion_point(field_set:netcon.response.messageId)
}

// optional int32 messageType = 2;
inline bool response::_internal_has_messagetype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool response::has_messagetype() const {
  return _internal_has_messagetype();
}
inline void response::clear_messagetype() {
  _impl_.messagetype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t response::_internal_messagetype() const {
  return _impl_.messagetype_;
}
inline int32_t response::messagetype() const {
  // @@protoc_insertion_point(field_get:netcon.response.messageType)
  return _internal_messagetype();
}
inline void response::_internal_set_messagetype(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.messagetype_ = value;
}
inline void response::set_messagetype(int32_t value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:netcon.response.messageType)
}

// optional .netcon.response_e responseType = 3;
inline bool response::_internal_has_responsetype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool response::has_responsetype() const {
  return _internal_has_responsetype();
}
inline void response::clear_responsetype() {
  _impl_.responsetype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::netcon::response_e response::_internal_responsetype() const {
  return static_cast< ::netcon::response_e >(_impl_.responsetype_);
}
inline ::netcon::response_e response::responsetype() const {
  // @@protoc_insertion_point(field_get:netcon.response.responseType)
  return _internal_responsetype();
}
inline void response::_internal_set_responsetype(::netcon::response_e value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.responsetype_ = value;
}
inline void response::set_responsetype(::netcon::response_e value) {
  _internal_set_responsetype(value);
  // @@protoc_insertion_point(field_set:netcon.response.responseType)
}

// optional string responseMsg = 4;
inline bool response::_internal_has_responsemsg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool response::has_responsemsg() const {
  return _internal_has_responsemsg();
}
inline void response::clear_responsemsg() {
  _impl_.responsemsg_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& response::responsemsg() const {
  // @@protoc_insertion_point(field_get:netcon.response.responseMsg)
  return _internal_responsemsg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void response::set_responsemsg(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.responsemsg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:netcon.response.responseMsg)
}
inline std::string* response::mutable_responsemsg() {
  std::string* _s = _internal_mutable_responsemsg();
  // @@protoc_insertion_point(field_mutable:netcon.response.responseMsg)
  return _s;
}
inline const std::string& response::_internal_responsemsg() const {
  return _impl_.responsemsg_.Get();
}
inline void response::_internal_set_responsemsg(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.responsemsg_.Set(value, GetArenaForAllocation());
}
inline std::string* response::_internal_mutable_responsemsg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.responsemsg_.Mutable(GetArenaForAllocation());
}
inline std::string* response::release_responsemsg() {
  // @@protoc_insertion_point(field_release:netcon.response.responseMsg)
  if (!_internal_has_responsemsg()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.responsemsg_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.responsemsg_.IsDefault()) {
    _impl_.responsemsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void response::set_allocated_responsemsg(std::string* responsemsg) {
  if (responsemsg != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.responsemsg_.SetAllocated(responsemsg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.responsemsg_.IsDefault()) {
    _impl_.responsemsg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:netcon.response.responseMsg)
}

// optional string responseVal = 5;
inline bool response::_internal_has_responseval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool response::has_responseval() const {
  return _internal_has_responseval();
}
inline void response::clear_responseval() {
  _impl_.responseval_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& response::responseval() const {
  // @@protoc_insertion_point(field_get:netcon.response.responseVal)
  return _internal_responseval();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void response::set_responseval(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.responseval_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:netcon.response.responseVal)
}
inline std::string* response::mutable_responseval() {
  std::string* _s = _internal_mutable_responseval();
  // @@protoc_insertion_point(field_mutable:netcon.response.responseVal)
  return _s;
}
inline const std::string& response::_internal_responseval() const {
  return _impl_.responseval_.Get();
}
inline void response::_internal_set_responseval(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.responseval_.Set(value, GetArenaForAllocation());
}
inline std::string* response::_internal_mutable_responseval() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.responseval_.Mutable(GetArenaForAllocation());
}
inline std::string* response::release_responseval() {
  // @@protoc_insertion_point(field_release:netcon.response.responseVal)
  if (!_internal_has_responseval()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.responseval_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.responseval_.IsDefault()) {
    _impl_.responseval_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void response::set_allocated_responseval(std::string* responseval) {
  if (responseval != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.responseval_.SetAllocated(responseval, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.responseval_.IsDefault()) {
    _impl_.responseval_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:netcon.response.responseVal)
}

// -------------------------------------------------------------------

// envelope

// bool encrypted = 1;
inline void envelope::clear_encrypted() {
  _impl_.encrypted_ = false;
}
inline bool envelope::_internal_encrypted() const {
  return _impl_.encrypted_;
}
inline bool envelope::encrypted() const {
  // @@protoc_insertion_point(field_get:netcon.envelope.encrypted)
  return _internal_encrypted();
}
inline void envelope::_internal_set_encrypted(bool value) {
  
  _impl_.encrypted_ = value;
}
inline void envelope::set_encrypted(bool value) {
  _internal_set_encrypted(value);
  // @@protoc_insertion_point(field_set:netcon.envelope.encrypted)
}

// bytes nonce = 2;
inline void envelope::clear_nonce() {
  _impl_.nonce_.ClearToEmpty();
}
inline const std::string& envelope::nonce() const {
  // @@protoc_insertion_point(field_get:netcon.envelope.nonce)
  return _internal_nonce();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void envelope::set_nonce(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nonce_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:netcon.envelope.nonce)
}
inline std::string* envelope::mutable_nonce() {
  std::string* _s = _internal_mutable_nonce();
  // @@protoc_insertion_point(field_mutable:netcon.envelope.nonce)
  return _s;
}
inline const std::string& envelope::_internal_nonce() const {
  return _impl_.nonce_.Get();
}
inline void envelope::_internal_set_nonce(const std::string& value) {
  
  _impl_.nonce_.Set(value, GetArenaForAllocation());
}
inline std::string* envelope::_internal_mutable_nonce() {
  
  return _impl_.nonce_.Mutable(GetArenaForAllocation());
}
inline std::string* envelope::release_nonce() {
  // @@protoc_insertion_point(field_release:netcon.envelope.nonce)
  return _impl_.nonce_.Release();
}
inline void envelope::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  _impl_.nonce_.SetAllocated(nonce, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nonce_.IsDefault()) {
    _impl_.nonce_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:netcon.envelope.nonce)
}

// bytes data = 3;
inline void envelope::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& envelope::data() const {
  // @@protoc_insertion_point(field_get:netcon.envelope.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void envelope::set_data(ArgT0&& arg0, ArgT... args) {
 
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:netcon.envelope.data)
}
inline std::string* envelope::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:netcon.envelope.data)
  return _s;
}
inline const std::string& envelope::_internal_data() const {
  return _impl_.data_.Get();
}
inline void envelope::_internal_set_data(const std::string& value) {
  
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* envelope::_internal_mutable_data() {
  
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* envelope::release_data() {
  // @@protoc_insertion_point(field_release:netcon.envelope.data)
  return _impl_.data_.Release();
}
inline void envelope::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:netcon.envelope.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace netcon

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::netcon::request_e> : ::std::true_type {};
template <> struct is_proto_enum< ::netcon::response_e> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <thirdparty/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_netcon_2eproto
